--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=9 LPM_WIDTHB=10 LPM_WIDTHP=19 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_mult 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 125 
SUBDESIGN mult_0fo
( 
	dataa[8..0]	:	input;
	datab[9..0]	:	input;
	result[18..0]	:	output;
) 
VARIABLE
	add13_result[15..0]	:	WIRE;
	add17_result[12..0]	:	WIRE;
	add21_result[8..0]	:	WIRE;
	add25_result[4..0]	:	WIRE;
	add9_result[18..0]	:	WIRE;
	cs2a[4..0] : carry_sum;
	cs4a[3..0] : carry_sum;
	le3a[9..0] : lcell;
	le5a[10..0] : lcell;
	le6a[10..0] : lcell;
	le7a[10..0] : lcell;
	le8a[10..0] : lcell;
	sft10a[18..0] : soft;
	sft11a[18..0] : soft;
	sft12a[18..0] : soft;
	sft14a[15..0] : soft;
	sft15a[15..0] : soft;
	sft16a[15..0] : soft;
	sft18a[12..0] : soft;
	sft19a[12..0] : soft;
	sft20a[12..0] : soft;
	sft22a[8..0] : soft;
	sft23a[8..0] : soft;
	sft24a[8..0] : soft;
	sft26a[4..0] : soft;
	sft27a[4..0] : soft;
	sft28a[4..0] : soft;
	dataa_node[9..0]	: WIRE;
	datab_node[8..0]	: WIRE;
	final_result_node[18..0]	: WIRE;
	w12w[9..0]	: WIRE;
	w139w[10..0]	: WIRE;
	w17w[9..0]	: WIRE;
	w190w[10..0]	: WIRE;
	w235w[10..0]	: WIRE;
	w286w[10..0]	: WIRE;
	w337w	: WIRE;
	w359w	: WIRE;
	w538w[18..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out;
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	cs2a[].cin = ( B"0", ((w12w[6..6] & cs2a[2].cout) # w12w[7..7]), ((w12w[4..4] & cs2a[1].cout) # w12w[5..5]), ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[3].cout, ((((((! w12w[7..7]) & w12w[6..6]) & cs2a[2].cout) # ((w12w[7..7] & w12w[6..6]) & (! cs2a[2].cout))) # ((w12w[7..7] & (! w12w[6..6])) & cs2a[2].cout)) # ((w12w[7..7] & (! w12w[6..6])) & (! cs2a[2].cout))), ((((((! w12w[5..5]) & w12w[4..4]) & cs2a[1].cout) # ((w12w[5..5] & w12w[4..4]) & (! cs2a[1].cout))) # ((w12w[5..5] & (! w12w[4..4])) & cs2a[1].cout)) # ((w12w[5..5] & (! w12w[4..4])) & (! cs2a[1].cout))), ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( ((w12w[6..6] & cs4a[2].cout) # w12w[7..7]), ((w12w[4..4] & cs4a[1].cout) # w12w[5..5]), ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( ((((((! w12w[7..7]) & (! w12w[6..6])) & cs4a[2].cout) # (((! w12w[7..7]) & w12w[6..6]) & (! cs4a[2].cout))) # ((w12w[7..7] & w12w[6..6]) & (! cs4a[2].cout))) # ((w12w[7..7] & (! w12w[6..6])) & cs4a[2].cout)), ((((((! w12w[5..5]) & (! w12w[4..4])) & cs4a[1].cout) # (((! w12w[5..5]) & w12w[4..4]) & (! cs4a[1].cout))) # ((w12w[5..5] & w12w[4..4]) & (! cs4a[1].cout))) # ((w12w[5..5] & (! w12w[4..4])) & cs4a[1].cout)), ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((w12w[8..8] & cs2a[4].sout) # ((w12w[8..8] & (! cs2a[4].sout)) & (! dataa_node[]))) # (((! w12w[8..8]) & cs2a[4].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[9..9], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[9..9], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[9..9], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[9..9], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[2].sout) & (! cs4a[2].sout))) & (! ((((! ( dataa_node[9..9], dataa_node[])) & cs2a[2].sout) & cs4a[2].sout) # ((( dataa_node[9..9], dataa_node[]) & (! cs2a[2].sout)) & cs4a[2].sout)))));
	le8a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[3].sout) & (! cs4a[3].sout))) & (! ((((! ( dataa_node[9..9], dataa_node[])) & cs2a[3].sout) & cs4a[3].sout) # ((( dataa_node[9..9], dataa_node[]) & (! cs2a[3].sout)) & cs4a[3].sout)))));
	sft10a[].in = ( w337w, ( (! w17w[9..9]), ( sft16a[14..14].out, ( sft16a[13..13].out, ( sft16a[12..12].out, ( sft16a[11..11].out, ( sft16a[10..10].out, ( sft16a[9..9].out, ( sft16a[8..8].out, ( sft16a[7..7].out, ( sft16a[6..6].out, ( sft16a[5..5].out, ( sft16a[4..4].out, ( sft16a[3..3].out, ( sft16a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out))))))))))))))))));
	sft11a[].in = ( w359w, ( sft16a[15..15].out, ( sft20a[12..12].out, ( sft20a[11..11].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, ( sft20a[0..0].out, ( sft16a[1..1].out, ( sft16a[0..0].out, ( w359w, cs2a[0].sout))))))))))))))))));
	sft12a[].in = add9_result[];
	sft14a[].in = ( w359w, ( le3a[8..8].out, ( le3a[7..7].out, ( le3a[6..6].out, ( le3a[5..5].out, ( le3a[4..4].out, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[3..2].out)))))))))))))));
	sft15a[].in = ( w359w, ( (! w286w[10..10]), ( le8a[9..9].out, ( le8a[8..8].out, ( sft24a[7..7].out, ( sft24a[6..6].out, ( sft24a[5..5].out, ( sft24a[4..4].out, ( sft24a[3..3].out, ( sft24a[2..2].out, ( sft24a[1..1].out, ( sft24a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w359w, cs2a[1].sout)))))))))))))));
	sft16a[].in = add13_result[];
	sft18a[].in = ( w359w, ( w337w, ( (! w235w[10..10]), ( le8a[7..7].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le5a[5..5].out, cs2a[2].sout))))))))))));
	sft19a[].in = ( w359w, ( w359w, ( sft24a[8..8].out, ( le7a[9..9].out, ( sft28a[4..4].out, ( sft28a[3..3].out, ( sft28a[2..2].out, ( sft28a[1..1].out, ( sft28a[0..0].out, ( le6a[5..5].out, ( le6a[4..4].out, ( w359w, le5a[4..4].out))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w359w, ( w337w, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le5a[7..6].out))))))));
	sft23a[].in = ( w359w, ( w359w, ( (! w190w[10..10]), ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( w359w, cs2a[3].sout))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w359w, ( w337w, ( (! w139w[10..10]), ( le5a[9..8].out))));
	sft27a[].in = ( w359w, ( w359w, ( w337w, ( w359w, w12w[8..8]))));
	sft28a[].in = add25_result[];
	dataa_node[] = ( datab[9..0]);
	datab_node[] = ( dataa[8..0]);
	final_result_node[] = ( w538w[18..0]);
	result[] = ( final_result_node[18..0]);
	w12w[] = ( datab_node[8..8], datab_node[]);
	w139w[] = le5a[].out;
	w17w[] = le3a[].out;
	w190w[] = le6a[].out;
	w235w[] = le7a[].out;
	w286w[] = le8a[].out;
	w337w = B"1";
	w359w = B"0";
	w538w[] = ( sft12a[18..17].out, sft12a[16..15].out, sft12a[14..13].out, sft12a[12..11].out, sft12a[10..9].out, sft12a[8..7].out, sft12a[6..5].out, sft12a[4..3].out, sft12a[2..1].out, sft12a[0..0].out);
END;
--VALID FILE
