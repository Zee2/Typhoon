--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="YES" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=53 LPM_WIDTHB=11 LPM_WIDTHP=64 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_mult 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION cycloneive_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneive_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 6 lut 83 
SUBDESIGN mult_o9t
( 
	dataa[52..0]	:	input;
	datab[10..0]	:	input;
	result[63..0]	:	output;
) 
VARIABLE
	add11_result[35..0]	:	WIRE;
	add7_result[46..0]	:	WIRE;
	mac_mult1 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 11,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 11,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 17,
			datab_clock = "none",
			datab_width = 11,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out2 : cycloneive_mac_out
		WITH (
			dataa_width = 29,
			output_clock = "none"
		);
	mac_out4 : cycloneive_mac_out
		WITH (
			dataa_width = 29,
			output_clock = "none"
		);
	mac_out6 : cycloneive_mac_out
		WITH (
			dataa_width = 28,
			output_clock = "none"
		);
	sft10a[46..0] : soft;
	sft12a[35..0] : soft;
	sft13a[35..0] : soft;
	sft14a[35..0] : soft;
	sft8a[46..0] : soft;
	sft9a[46..0] : soft;
	w176w	: WIRE;
	w214w	: WIRE;
	w480w[64..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[10..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"1";
	mac_mult3.dataa[] = ( dataa[35..18]);
	mac_mult3.datab[] = ( datab[10..0]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"1";
	mac_mult5.dataa[] = ( dataa[52..36]);
	mac_mult5.datab[] = ( datab[10..0]);
	mac_mult5.signa = B"1";
	mac_mult5.signb = B"1";
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	sft10a[].in = add7_result[];
	sft12a[].in = ( w214w, ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( (! mac_out4.dataout[28..28]), ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], w176w)))))))))))))))))))))))))))))))))));
	sft13a[].in = ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..1], ( mac_out6.dataout[0..0], ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, mac_out4.dataout[10..10])))))))))))))))))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft8a[].in = ( w176w, ( (! mac_out6.dataout[27..27]), ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( mac_out6.dataout[10..10], ( mac_out4.dataout[27..27], ( mac_out4.dataout[26..26], ( mac_out4.dataout[25..25], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( w176w, ( (! mac_out2.dataout[28..28]), ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18]))))))))))))))))))))))))))))))))))))))))))))));
	sft9a[].in = ( w214w, ( sft14a[35..35].out, ( sft14a[34..34].out, ( sft14a[33..33].out, ( sft14a[32..32].out, ( sft14a[31..31].out, ( sft14a[30..30].out, ( sft14a[29..29].out, ( sft14a[28..28].out, ( sft14a[27..27].out, ( sft14a[26..26].out, ( sft14a[25..25].out, ( sft14a[24..24].out, ( sft14a[23..23].out, ( sft14a[22..22].out, ( sft14a[21..21].out, ( sft14a[20..20].out, ( sft14a[19..19].out, ( sft14a[18..18].out, ( sft14a[17..17].out, ( sft14a[16..16].out, ( sft14a[15..15].out, ( sft14a[14..14].out, ( sft14a[13..13].out, ( sft14a[12..12].out, ( sft14a[11..11].out, ( sft14a[10..10].out, ( sft14a[9..9].out, ( sft14a[8..8].out, ( sft14a[7..7].out, ( sft14a[6..6].out, ( sft14a[5..5].out, ( sft14a[4..4].out, ( sft14a[3..3].out, ( sft14a[2..2].out, ( sft14a[1..1].out, ( sft14a[0..0].out, ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0]))))))))))))))))))))))))))))))))))))))))))))));
	result[63..0] = w480w[63..0];
	w176w = B"1";
	w214w = B"0";
	w480w[] = ( sft10a[46..45].out, sft10a[44..43].out, sft10a[42..41].out, sft10a[40..39].out, sft10a[38..37].out, sft10a[36..35].out, sft10a[34..33].out, sft10a[32..31].out, sft10a[30..29].out, sft10a[28..27].out, sft10a[26..25].out, sft10a[24..23].out, sft10a[22..21].out, sft10a[20..19].out, sft10a[18..17].out, sft10a[16..15].out, sft10a[14..13].out, sft10a[12..11].out, sft10a[10..9].out, sft10a[8..7].out, sft10a[6..5].out, sft10a[4..3].out, sft10a[2..1].out, sft10a[0..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
