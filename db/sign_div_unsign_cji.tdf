--sign_div_unsign DEN_REPRESENTATION="SIGNED" DEN_WIDTH=18 LPM_PIPELINE=5 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=18 SKIP_BITS=0 clken clock denominator numerator quotient remainder
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_abs 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_divide 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION alt_u_div_jgg (clk_en, clock, denominator[17..0], numerator[17..0])
RETURNS ( quotient[17..0], remainder[17..0]);

--synthesis_resources = lut 220 reg 365 
SUBDESIGN sign_div_unsign_cji
( 
	clken	:	input;
	clock	:	input;
	denominator[17..0]	:	input;
	numerator[17..0]	:	input;
	quotient[17..0]	:	output;
	remainder[17..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_jgg;
	DFF_q_is_neg[4..0] : dffe;
	compl_adder1_result_int[18..0]	:	WIRE;
	compl_adder1_cin	:	WIRE;
	compl_adder1_dataa[17..0]	:	WIRE;
	compl_adder1_datab[17..0]	:	WIRE;
	compl_adder1_result[17..0]	:	WIRE;
	compl_adder_3_result_int[18..0]	:	WIRE;
	compl_adder_3_cin	:	WIRE;
	compl_adder_3_dataa[17..0]	:	WIRE;
	compl_adder_3_datab[17..0]	:	WIRE;
	compl_adder_3_result[17..0]	:	WIRE;
	aclr	: NODE;
	den_choice[17..0]	: WIRE;
	norm_num[17..0]	: WIRE;
	num_choice[17..0]	: WIRE;
	pre_neg_den[17..0]	: WIRE;
	pre_neg_quot[17..0]	: WIRE;
	protect_quotient[17..0]	: WIRE;
	protect_remainder[17..0]	: WIRE;
	q_is_neg	: WIRE;
	vcc_wire	: WIRE;
	zero_wire[17..0]	: WIRE;
	zero_wire_5w[17..0]	: WIRE;

BEGIN 
	divider.clk_en = clken;
	divider.clock = clock;
	divider.denominator[] = den_choice[];
	divider.numerator[] = norm_num[];
	DFF_q_is_neg[].clk = clock;
	DFF_q_is_neg[].clrn = (! aclr);
	DFF_q_is_neg[].d = ( q_is_neg, DFF_q_is_neg[4..1].q);
	DFF_q_is_neg[].ena = clken;
	compl_adder1_result_int[] = (compl_adder1_dataa[], compl_adder1_cin) + (compl_adder1_datab[], compl_adder1_cin);
	compl_adder1_result[] = compl_adder1_result_int[18..1];
	compl_adder1_cin = vcc_wire;
	compl_adder1_dataa[] = (! denominator[]);
	compl_adder1_datab[] = zero_wire[];
	compl_adder_3_result_int[] = (compl_adder_3_dataa[], compl_adder_3_cin) + (compl_adder_3_datab[], compl_adder_3_cin);
	compl_adder_3_result[] = compl_adder_3_result_int[18..1];
	compl_adder_3_cin = vcc_wire;
	compl_adder_3_dataa[] = (! protect_quotient[]);
	compl_adder_3_datab[] = zero_wire_5w[];
	aclr = GND;
	den_choice[] = ((denominator[] & (! denominator[17..17])) # (pre_neg_den[] & denominator[17..17]));
	norm_num[] = num_choice[];
	num_choice[] = numerator[];
	pre_neg_den[] = compl_adder1_result[];
	pre_neg_quot[] = compl_adder_3_result[];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	q_is_neg = denominator[17..17];
	quotient[] = ((protect_quotient[] & (! DFF_q_is_neg[0].q)) # (pre_neg_quot[] & DFF_q_is_neg[0].q));
	remainder[] = protect_remainder[];
	vcc_wire = B"1";
	zero_wire[] = B"000000000000000000";
	zero_wire_5w[] = B"000000000000000000";
END;
--VALID FILE
